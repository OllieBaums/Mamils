{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst usePhotos = () => {\n  _s();\n  const [photos, setPhotos] = useState([]);\n  const [availableYears, setAvailableYears] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch all photos or photos filtered by year\n  const fetchPhotos = async (year = null) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const url = year ? `${API_BASE_URL}/photos?year=${year}` : `${API_BASE_URL}/photos`;\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch photos: ${response.status}`);\n      }\n      const data = await response.json();\n      setPhotos(data);\n    } catch (err) {\n      console.error('Error fetching photos:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch available years\n  const fetchAvailableYears = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/photos/years`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch years: ${response.status}`);\n      }\n      const years = await response.json();\n      setAvailableYears(years);\n    } catch (err) {\n      console.error('Error fetching years:', err);\n      setError(err.message);\n    }\n  };\n\n  // Upload new photos\n  const uploadPhotos = async (files, metadata = {}) => {\n    try {\n      setError(null);\n      const formData = new FormData();\n\n      // Add files to form data\n      for (let i = 0; i < files.length; i++) {\n        formData.append('photos', files[i]);\n      }\n\n      // Add metadata\n      if (metadata.dateTaken) {\n        formData.append('dateTaken', metadata.dateTaken);\n      }\n      if (metadata.description) {\n        formData.append('description', metadata.description);\n      }\n      if (metadata.tags) {\n        formData.append('tags', metadata.tags);\n      }\n      const response = await fetch(`${API_BASE_URL}/photos/upload`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to upload photos');\n      }\n      const newPhotos = await response.json();\n\n      // Add new photos to the current list\n      setPhotos(prev => [...prev, ...newPhotos]);\n\n      // Refresh available years\n      await fetchAvailableYears();\n      return newPhotos;\n    } catch (err) {\n      console.error('Error uploading photos:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update photo metadata\n  const updatePhoto = async (photoId, updates) => {\n    try {\n      setError(null);\n      const response = await fetch(`${API_BASE_URL}/photos/${photoId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updates)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to update photo');\n      }\n      const updatedPhoto = await response.json();\n\n      // Update photo in current list\n      setPhotos(prev => prev.map(photo => photo.id === photoId ? updatedPhoto : photo));\n      return updatedPhoto;\n    } catch (err) {\n      console.error('Error updating photo:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Delete a photo\n  const deletePhoto = async photoId => {\n    try {\n      setError(null);\n      const response = await fetch(`${API_BASE_URL}/photos/${photoId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to delete photo');\n      }\n\n      // Remove photo from current list\n      setPhotos(prev => prev.filter(photo => photo.id !== photoId));\n\n      // Refresh available years\n      await fetchAvailableYears();\n    } catch (err) {\n      console.error('Error deleting photo:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Get photos by IDs (for displaying selected photos in rides)\n  const getPhotosByIds = photoIds => {\n    if (!photoIds || photoIds.length === 0) return [];\n    return photos.filter(photo => photoIds.includes(photo.id));\n  };\n\n  // Load photos and years when component mounts\n  useEffect(() => {\n    fetchPhotos();\n    fetchAvailableYears();\n  }, []);\n\n  // Get photo URL by ID\n  const getPhotoUrl = photoId => {\n    const photo = photos.find(p => p.id === photoId);\n    if (!photo) return null;\n    return `${API_BASE_URL.replace('/api', '')}${photo.url}`;\n  };\n  return {\n    photos,\n    availableYears,\n    loading,\n    error,\n    fetchPhotos,\n    fetchAvailableYears,\n    uploadPhotos,\n    updatePhoto,\n    deletePhoto,\n    getPhotosByIds,\n    refetch: () => {\n      fetchPhotos();\n      fetchAvailableYears();\n    }\n  };\n};\n_s(usePhotos, \"t+ZmPwPBc1z0tMVFsqpOcasOuXs=\");\nexport default usePhotos;","map":{"version":3,"names":["useEffect","useState","API_BASE_URL","process","env","REACT_APP_API_URL","usePhotos","_s","photos","setPhotos","availableYears","setAvailableYears","loading","setLoading","error","setError","fetchPhotos","year","url","response","fetch","ok","Error","status","data","json","err","console","message","fetchAvailableYears","years","uploadPhotos","files","metadata","formData","FormData","i","length","append","dateTaken","description","tags","method","body","errorData","newPhotos","prev","updatePhoto","photoId","updates","headers","JSON","stringify","updatedPhoto","map","photo","id","deletePhoto","filter","getPhotosByIds","photoIds","includes","getPhotoUrl","find","p","replace","refetch"],"sources":["C:/Users/ollie/OneDrive/Documents/personal-Projects/Mamils/frontend/src/hooks/usePhotos.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst usePhotos = () => {\r\n  const [photos, setPhotos] = useState([]);\r\n  const [availableYears, setAvailableYears] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch all photos or photos filtered by year\r\n  const fetchPhotos = async (year = null) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const url = year \r\n        ? `${API_BASE_URL}/photos?year=${year}`\r\n        : `${API_BASE_URL}/photos`;\r\n      \r\n      const response = await fetch(url);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch photos: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setPhotos(data);\r\n    } catch (err) {\r\n      console.error('Error fetching photos:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch available years\r\n  const fetchAvailableYears = async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/photos/years`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch years: ${response.status}`);\r\n      }\r\n      \r\n      const years = await response.json();\r\n      setAvailableYears(years);\r\n    } catch (err) {\r\n      console.error('Error fetching years:', err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Upload new photos\r\n  const uploadPhotos = async (files, metadata = {}) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      const formData = new FormData();\r\n      \r\n      // Add files to form data\r\n      for (let i = 0; i < files.length; i++) {\r\n        formData.append('photos', files[i]);\r\n      }\r\n      \r\n      // Add metadata\r\n      if (metadata.dateTaken) {\r\n        formData.append('dateTaken', metadata.dateTaken);\r\n      }\r\n      if (metadata.description) {\r\n        formData.append('description', metadata.description);\r\n      }\r\n      if (metadata.tags) {\r\n        formData.append('tags', metadata.tags);\r\n      }\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/photos/upload`, {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to upload photos');\r\n      }\r\n\r\n      const newPhotos = await response.json();\r\n      \r\n      // Add new photos to the current list\r\n      setPhotos(prev => [...prev, ...newPhotos]);\r\n      \r\n      // Refresh available years\r\n      await fetchAvailableYears();\r\n      \r\n      return newPhotos;\r\n    } catch (err) {\r\n      console.error('Error uploading photos:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Update photo metadata\r\n  const updatePhoto = async (photoId, updates) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/photos/${photoId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updates),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to update photo');\r\n      }\r\n\r\n      const updatedPhoto = await response.json();\r\n      \r\n      // Update photo in current list\r\n      setPhotos(prev => prev.map(photo => \r\n        photo.id === photoId ? updatedPhoto : photo\r\n      ));\r\n      \r\n      return updatedPhoto;\r\n    } catch (err) {\r\n      console.error('Error updating photo:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Delete a photo\r\n  const deletePhoto = async (photoId) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/photos/${photoId}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to delete photo');\r\n      }\r\n\r\n      // Remove photo from current list\r\n      setPhotos(prev => prev.filter(photo => photo.id !== photoId));\r\n      \r\n      // Refresh available years\r\n      await fetchAvailableYears();\r\n    } catch (err) {\r\n      console.error('Error deleting photo:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Get photos by IDs (for displaying selected photos in rides)\r\n  const getPhotosByIds = (photoIds) => {\r\n    if (!photoIds || photoIds.length === 0) return [];\r\n    return photos.filter(photo => photoIds.includes(photo.id));\r\n  };\r\n\r\n  // Load photos and years when component mounts\r\n  useEffect(() => {\r\n    fetchPhotos();\r\n    fetchAvailableYears();\r\n  }, []);\r\n\r\n   // Get photo URL by ID\r\n  const getPhotoUrl = (photoId) => {\r\n    const photo = photos.find(p => p.id === photoId);\r\n    if (!photo) return null;\r\n    return `${API_BASE_URL.replace('/api', '')}${photo.url}`;\r\n  };\r\n\r\n  return {\r\n    photos,\r\n    availableYears,\r\n    loading,\r\n    error,\r\n    fetchPhotos,\r\n    fetchAvailableYears,\r\n    uploadPhotos,\r\n    updatePhoto,\r\n    deletePhoto,\r\n    getPhotosByIds,\r\n    refetch: () => {\r\n      fetchPhotos();\r\n      fetchAvailableYears();\r\n    }\r\n  };\r\n};\r\n\r\nexport default usePhotos;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}