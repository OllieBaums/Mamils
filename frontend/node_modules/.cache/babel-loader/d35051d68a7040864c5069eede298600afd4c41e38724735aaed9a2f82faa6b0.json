{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst STORAGE_KEY = \"bikeAppRides\";\nconst useRides = () => {\n  _s();\n  const [rides, setRides] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [useLocalStorage, setUseLocalStorage] = useState(false);\n\n  // Try to fetch from backend, fallback to localStorage\n  const fetchRides = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Try backend first\n      const response = await fetch(`${API_BASE_URL}/rides`);\n      if (!response.ok) {\n        throw new Error(`Backend not available (${response.status})`);\n      }\n      const data = await response.json();\n      setRides(data);\n      setUseLocalStorage(false);\n    } catch (err) {\n      console.warn('Backend not available, using localStorage:', err.message);\n\n      // Fallback to localStorage\n      try {\n        const stored = localStorage.getItem(STORAGE_KEY);\n        const localRides = stored ? JSON.parse(stored) : [];\n        setRides(localRides);\n        setUseLocalStorage(true);\n        setError(\"Using offline mode - start backend for full features\");\n      } catch (storageErr) {\n        console.error('Error reading from localStorage:', storageErr);\n        setRides([]);\n        setError(\"Unable to load rides\");\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load rides when component mounts\n  useEffect(() => {\n    fetchRides();\n  }, []);\n\n  // Save to localStorage when using offline mode\n  useEffect(() => {\n    if (useLocalStorage) {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(rides));\n    }\n  }, [rides, useLocalStorage]);\n\n  // Add a new ride\n  const addRide = async newRide => {\n    try {\n      setError(null);\n      const rideWithId = {\n        ...newRide,\n        id: Date.now(),\n        createdAt: new Date().toISOString()\n      };\n      if (useLocalStorage) {\n        // Add to localStorage\n        setRides(prev => [...prev, rideWithId]);\n        return rideWithId;\n      } else {\n        // Try backend\n        const response = await fetch(`${API_BASE_URL}/rides`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(newRide)\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || 'Failed to add ride');\n        }\n        const createdRide = await response.json();\n        setRides(prev => [...prev, createdRide]);\n        return createdRide;\n      }\n    } catch (err) {\n      console.error('Error adding ride:', err);\n\n      // If backend fails, fallback to localStorage\n      if (!useLocalStorage) {\n        console.warn('Backend failed, switching to localStorage');\n        setUseLocalStorage(true);\n        const rideWithId = {\n          ...newRide,\n          id: Date.now(),\n          createdAt: new Date().toISOString()\n        };\n        setRides(prev => [...prev, rideWithId]);\n        setError(\"Added ride offline - start backend to sync\");\n        return rideWithId;\n      }\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update an existing ride\n  const updateRide = async updatedRide => {\n    try {\n      setError(null);\n      if (useLocalStorage) {\n        // Update in localStorage\n        setRides(prev => prev.map(ride => ride.id === updatedRide.id ? {\n          ...updatedRide,\n          updatedAt: new Date().toISOString()\n        } : ride));\n        return updatedRide;\n      } else {\n        // Try backend\n        const response = await fetch(`${API_BASE_URL}/rides/${updatedRide.id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updatedRide)\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || 'Failed to update ride');\n        }\n        const updated = await response.json();\n        setRides(prev => prev.map(ride => ride.id === updated.id ? updated : ride));\n        return updated;\n      }\n    } catch (err) {\n      console.error('Error updating ride:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Delete a ride\n  const deleteRide = async id => {\n    try {\n      setError(null);\n      if (useLocalStorage) {\n        // Delete from localStorage\n        setRides(prev => prev.filter(ride => ride.id !== id));\n        return;\n      } else {\n        // Try backend\n        const response = await fetch(`${API_BASE_URL}/rides/${id}`, {\n          method: 'DELETE'\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || 'Failed to delete ride');\n        }\n        setRides(prev => prev.filter(ride => ride.id !== id));\n      }\n    } catch (err) {\n      console.error('Error deleting ride:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n  return {\n    rides,\n    loading,\n    error,\n    addRide,\n    updateRide,\n    deleteRide,\n    refetch: fetchRides,\n    isOffline: useLocalStorage\n  };\n};\n_s(useRides, \"85/kKb0NCXEGxM/+i0wazJPIlQE=\");\nexport default useRides;","map":{"version":3,"names":["useEffect","useState","API_BASE_URL","process","env","REACT_APP_API_URL","STORAGE_KEY","useRides","_s","rides","setRides","loading","setLoading","error","setError","useLocalStorage","setUseLocalStorage","fetchRides","response","fetch","ok","Error","status","data","json","err","console","warn","message","stored","localStorage","getItem","localRides","JSON","parse","storageErr","setItem","stringify","addRide","newRide","rideWithId","id","Date","now","createdAt","toISOString","prev","method","headers","body","errorData","createdRide","updateRide","updatedRide","map","ride","updatedAt","updated","deleteRide","filter","refetch","isOffline"],"sources":["C:/Users/ollie/OneDrive/Documents/personal-Projects/Mamils/frontend/src/hooks/useRides.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\nconst STORAGE_KEY = \"bikeAppRides\";\r\n\r\nconst useRides = () => {\r\n  const [rides, setRides] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [useLocalStorage, setUseLocalStorage] = useState(false);\r\n\r\n  // Try to fetch from backend, fallback to localStorage\r\n  const fetchRides = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // Try backend first\r\n      const response = await fetch(`${API_BASE_URL}/rides`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Backend not available (${response.status})`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setRides(data);\r\n      setUseLocalStorage(false);\r\n    } catch (err) {\r\n      console.warn('Backend not available, using localStorage:', err.message);\r\n      \r\n      // Fallback to localStorage\r\n      try {\r\n        const stored = localStorage.getItem(STORAGE_KEY);\r\n        const localRides = stored ? JSON.parse(stored) : [];\r\n        setRides(localRides);\r\n        setUseLocalStorage(true);\r\n        setError(\"Using offline mode - start backend for full features\");\r\n      } catch (storageErr) {\r\n        console.error('Error reading from localStorage:', storageErr);\r\n        setRides([]);\r\n        setError(\"Unable to load rides\");\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Load rides when component mounts\r\n  useEffect(() => {\r\n    fetchRides();\r\n  }, []);\r\n\r\n  // Save to localStorage when using offline mode\r\n  useEffect(() => {\r\n    if (useLocalStorage) {\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(rides));\r\n    }\r\n  }, [rides, useLocalStorage]);\r\n\r\n  // Add a new ride\r\n  const addRide = async (newRide) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      const rideWithId = {\r\n        ...newRide,\r\n        id: Date.now(),\r\n        createdAt: new Date().toISOString()\r\n      };\r\n\r\n      if (useLocalStorage) {\r\n        // Add to localStorage\r\n        setRides(prev => [...prev, rideWithId]);\r\n        return rideWithId;\r\n      } else {\r\n        // Try backend\r\n        const response = await fetch(`${API_BASE_URL}/rides`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(newRide),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.error || 'Failed to add ride');\r\n        }\r\n\r\n        const createdRide = await response.json();\r\n        setRides(prev => [...prev, createdRide]);\r\n        return createdRide;\r\n      }\r\n    } catch (err) {\r\n      console.error('Error adding ride:', err);\r\n      \r\n      // If backend fails, fallback to localStorage\r\n      if (!useLocalStorage) {\r\n        console.warn('Backend failed, switching to localStorage');\r\n        setUseLocalStorage(true);\r\n        const rideWithId = {\r\n          ...newRide,\r\n          id: Date.now(),\r\n          createdAt: new Date().toISOString()\r\n        };\r\n        setRides(prev => [...prev, rideWithId]);\r\n        setError(\"Added ride offline - start backend to sync\");\r\n        return rideWithId;\r\n      }\r\n      \r\n      setError(err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Update an existing ride\r\n  const updateRide = async (updatedRide) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      if (useLocalStorage) {\r\n        // Update in localStorage\r\n        setRides(prev => prev.map(ride => \r\n          ride.id === updatedRide.id ? { ...updatedRide, updatedAt: new Date().toISOString() } : ride\r\n        ));\r\n        return updatedRide;\r\n      } else {\r\n        // Try backend\r\n        const response = await fetch(`${API_BASE_URL}/rides/${updatedRide.id}`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(updatedRide),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.error || 'Failed to update ride');\r\n        }\r\n\r\n        const updated = await response.json();\r\n        setRides(prev => prev.map(ride => \r\n          ride.id === updated.id ? updated : ride\r\n        ));\r\n        return updated;\r\n      }\r\n    } catch (err) {\r\n      console.error('Error updating ride:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Delete a ride\r\n  const deleteRide = async (id) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      if (useLocalStorage) {\r\n        // Delete from localStorage\r\n        setRides(prev => prev.filter(ride => ride.id !== id));\r\n        return;\r\n      } else {\r\n        // Try backend\r\n        const response = await fetch(`${API_BASE_URL}/rides/${id}`, {\r\n          method: 'DELETE',\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.error || 'Failed to delete ride');\r\n        }\r\n\r\n        setRides(prev => prev.filter(ride => ride.id !== id));\r\n      }\r\n    } catch (err) {\r\n      console.error('Error deleting ride:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  return {\r\n    rides,\r\n    loading,\r\n    error,\r\n    addRide,\r\n    updateRide,\r\n    deleteRide,\r\n    refetch: fetchRides,\r\n    isOffline: useLocalStorage\r\n  };\r\n};\r\n\r\nexport default useRides;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}