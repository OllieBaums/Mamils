{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nconst useLocationSearch = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Using Nominatim (OpenStreetMap) geocoding service - free and no API key required\n  const searchLocation = async query => {\n    if (!query.trim()) {\n      throw new Error('Please enter a location name');\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?` + `q=${encodeURIComponent(query.trim())}&` + `format=json&` + `limit=5&` + `addressdetails=1`);\n      if (!response.ok) {\n        throw new Error('Failed to search location');\n      }\n      const results = await response.json();\n      if (results.length === 0) {\n        throw new Error('No locations found. Try a different search term.');\n      }\n\n      // Format results for easier use\n      const formattedResults = results.map(result => {\n        var _result$address, _result$address2, _result$address3, _result$address4, _result$address5, _result$address6;\n        return {\n          id: result.place_id,\n          name: result.display_name,\n          lat: parseFloat(result.lat),\n          lng: parseFloat(result.lon),\n          address: {\n            city: ((_result$address = result.address) === null || _result$address === void 0 ? void 0 : _result$address.city) || ((_result$address2 = result.address) === null || _result$address2 === void 0 ? void 0 : _result$address2.town) || ((_result$address3 = result.address) === null || _result$address3 === void 0 ? void 0 : _result$address3.village),\n            state: (_result$address4 = result.address) === null || _result$address4 === void 0 ? void 0 : _result$address4.state,\n            country: (_result$address5 = result.address) === null || _result$address5 === void 0 ? void 0 : _result$address5.country,\n            postcode: (_result$address6 = result.address) === null || _result$address6 === void 0 ? void 0 : _result$address6.postcode\n          },\n          type: result.type,\n          importance: result.importance\n        };\n      });\n      return formattedResults;\n    } catch (err) {\n      const errorMessage = err.message || 'Failed to search location';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get current user location (if browser supports it)\n  const getCurrentLocation = () => {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('Geolocation is not supported by this browser'));\n        return;\n      }\n      setLoading(true);\n      setError(null);\n      navigator.geolocation.getCurrentPosition(async position => {\n        try {\n          var _result$address7, _result$address8, _result$address9, _result$address0, _result$address1, _result$address10;\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n\n          // Reverse geocode to get place name\n          const response = await fetch(`https://nominatim.openstreetmap.org/reverse?` + `lat=${latitude}&` + `lon=${longitude}&` + `format=json&` + `addressdetails=1`);\n          if (!response.ok) {\n            throw new Error('Failed to get location name');\n          }\n          const result = await response.json();\n          resolve({\n            id: result.place_id,\n            name: result.display_name,\n            lat: latitude,\n            lng: longitude,\n            address: {\n              city: ((_result$address7 = result.address) === null || _result$address7 === void 0 ? void 0 : _result$address7.city) || ((_result$address8 = result.address) === null || _result$address8 === void 0 ? void 0 : _result$address8.town) || ((_result$address9 = result.address) === null || _result$address9 === void 0 ? void 0 : _result$address9.village),\n              state: (_result$address0 = result.address) === null || _result$address0 === void 0 ? void 0 : _result$address0.state,\n              country: (_result$address1 = result.address) === null || _result$address1 === void 0 ? void 0 : _result$address1.country,\n              postcode: (_result$address10 = result.address) === null || _result$address10 === void 0 ? void 0 : _result$address10.postcode\n            },\n            type: 'current_location',\n            importance: 1\n          });\n        } catch (err) {\n          // If reverse geocoding fails, still return coordinates\n          resolve({\n            id: 'current',\n            name: `Current Location (${latitude.toFixed(4)}, ${longitude.toFixed(4)})`,\n            lat: latitude,\n            lng: longitude,\n            address: {},\n            type: 'current_location',\n            importance: 1\n          });\n        } finally {\n          setLoading(false);\n        }\n      }, error => {\n        setLoading(false);\n        let errorMessage = 'Failed to get current location';\n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            errorMessage = 'Location access denied by user';\n            break;\n          case error.POSITION_UNAVAILABLE:\n            errorMessage = 'Location information unavailable';\n            break;\n          case error.TIMEOUT:\n            errorMessage = 'Location request timed out';\n            break;\n          default:\n            errorMessage = 'Unknown location error';\n            break;\n        }\n        setError(errorMessage);\n        reject(new Error(errorMessage));\n      }, {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 60000\n      });\n    });\n  };\n  return {\n    searchLocation,\n    getCurrentLocation,\n    loading,\n    error,\n    clearError: () => setError(null)\n  };\n};\n_s(useLocationSearch, \"Iz3ozxQ+abMaAIcGIvU8cKUcBeo=\");\nexport default useLocationSearch;","map":{"version":3,"names":["useState","useLocationSearch","_s","loading","setLoading","error","setError","searchLocation","query","trim","Error","response","fetch","encodeURIComponent","ok","results","json","length","formattedResults","map","result","_result$address","_result$address2","_result$address3","_result$address4","_result$address5","_result$address6","id","place_id","name","display_name","lat","parseFloat","lng","lon","address","city","town","village","state","country","postcode","type","importance","err","errorMessage","message","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","_result$address7","_result$address8","_result$address9","_result$address0","_result$address1","_result$address10","latitude","longitude","coords","toFixed","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","enableHighAccuracy","timeout","maximumAge","clearError"],"sources":["C:/Users/ollie/OneDrive/Documents/personal-Projects/Mamils/frontend/src/hooks/useLocationSearch.js"],"sourcesContent":["import { useState } from 'react';\r\n\r\nconst useLocationSearch = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Using Nominatim (OpenStreetMap) geocoding service - free and no API key required\r\n  const searchLocation = async (query) => {\r\n    if (!query.trim()) {\r\n      throw new Error('Please enter a location name');\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://nominatim.openstreetmap.org/search?` +\r\n        `q=${encodeURIComponent(query.trim())}&` +\r\n        `format=json&` +\r\n        `limit=5&` +\r\n        `addressdetails=1`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to search location');\r\n      }\r\n\r\n      const results = await response.json();\r\n      \r\n      if (results.length === 0) {\r\n        throw new Error('No locations found. Try a different search term.');\r\n      }\r\n\r\n      // Format results for easier use\r\n      const formattedResults = results.map(result => ({\r\n        id: result.place_id,\r\n        name: result.display_name,\r\n        lat: parseFloat(result.lat),\r\n        lng: parseFloat(result.lon),\r\n        address: {\r\n          city: result.address?.city || result.address?.town || result.address?.village,\r\n          state: result.address?.state,\r\n          country: result.address?.country,\r\n          postcode: result.address?.postcode\r\n        },\r\n        type: result.type,\r\n        importance: result.importance\r\n      }));\r\n\r\n      return formattedResults;\r\n    } catch (err) {\r\n      const errorMessage = err.message || 'Failed to search location';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Get current user location (if browser supports it)\r\n  const getCurrentLocation = () => {\r\n    return new Promise((resolve, reject) => {\r\n      if (!navigator.geolocation) {\r\n        reject(new Error('Geolocation is not supported by this browser'));\r\n        return;\r\n      }\r\n\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      navigator.geolocation.getCurrentPosition(\r\n        async (position) => {\r\n          try {\r\n            const { latitude, longitude } = position.coords;\r\n            \r\n            // Reverse geocode to get place name\r\n            const response = await fetch(\r\n              `https://nominatim.openstreetmap.org/reverse?` +\r\n              `lat=${latitude}&` +\r\n              `lon=${longitude}&` +\r\n              `format=json&` +\r\n              `addressdetails=1`\r\n            );\r\n\r\n            if (!response.ok) {\r\n              throw new Error('Failed to get location name');\r\n            }\r\n\r\n            const result = await response.json();\r\n            \r\n            resolve({\r\n              id: result.place_id,\r\n              name: result.display_name,\r\n              lat: latitude,\r\n              lng: longitude,\r\n              address: {\r\n                city: result.address?.city || result.address?.town || result.address?.village,\r\n                state: result.address?.state,\r\n                country: result.address?.country,\r\n                postcode: result.address?.postcode\r\n              },\r\n              type: 'current_location',\r\n              importance: 1\r\n            });\r\n          } catch (err) {\r\n            // If reverse geocoding fails, still return coordinates\r\n            resolve({\r\n              id: 'current',\r\n              name: `Current Location (${latitude.toFixed(4)}, ${longitude.toFixed(4)})`,\r\n              lat: latitude,\r\n              lng: longitude,\r\n              address: {},\r\n              type: 'current_location',\r\n              importance: 1\r\n            });\r\n          } finally {\r\n            setLoading(false);\r\n          }\r\n        },\r\n        (error) => {\r\n          setLoading(false);\r\n          let errorMessage = 'Failed to get current location';\r\n          \r\n          switch (error.code) {\r\n            case error.PERMISSION_DENIED:\r\n              errorMessage = 'Location access denied by user';\r\n              break;\r\n            case error.POSITION_UNAVAILABLE:\r\n              errorMessage = 'Location information unavailable';\r\n              break;\r\n            case error.TIMEOUT:\r\n              errorMessage = 'Location request timed out';\r\n              break;\r\n            default:\r\n              errorMessage = 'Unknown location error';\r\n              break;\r\n          }\r\n          \r\n          setError(errorMessage);\r\n          reject(new Error(errorMessage));\r\n        },\r\n        {\r\n          enableHighAccuracy: true,\r\n          timeout: 10000,\r\n          maximumAge: 60000\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  return {\r\n    searchLocation,\r\n    getCurrentLocation,\r\n    loading,\r\n    error,\r\n    clearError: () => setError(null)\r\n  };\r\n};\r\n\r\nexport default useLocationSearch;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}