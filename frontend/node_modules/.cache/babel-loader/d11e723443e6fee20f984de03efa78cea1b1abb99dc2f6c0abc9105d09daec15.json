{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst useRides = () => {\n  _s();\n  const [rides, setRides] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch rides from backend\n  const fetchRides = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(`${API_BASE_URL}/rides`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setRides(data);\n    } catch (err) {\n      console.error('Error fetching rides:', err);\n      setError('Failed to load rides');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load rides when component mounts\n  useEffect(() => {\n    fetchRides();\n  }, []);\n\n  // Add a new ride\n  const addRide = async newRide => {\n    try {\n      setError(null);\n      const response = await fetch(`${API_BASE_URL}/rides`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newRide)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to add ride');\n      }\n      const createdRide = await response.json();\n      setRides(prev => [...prev, createdRide]);\n      return createdRide;\n    } catch (err) {\n      console.error('Error adding ride:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update an existing ride\n  const updateRide = async updatedRide => {\n    try {\n      setError(null);\n      const response = await fetch(`${API_BASE_URL}/rides/${updatedRide.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedRide)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to update ride');\n      }\n      const updated = await response.json();\n      setRides(prev => prev.map(ride => ride.id === updated.id ? updated : ride));\n      return updated;\n    } catch (err) {\n      console.error('Error updating ride:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Delete a ride\n  const deleteRide = async id => {\n    try {\n      setError(null);\n      const response = await fetch(`${API_BASE_URL}/rides/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to delete ride');\n      }\n      setRides(prev => prev.filter(ride => ride.id !== id));\n    } catch (err) {\n      console.error('Error deleting ride:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Get a single ride by ID\n  const getRide = async id => {\n    try {\n      setError(null);\n      const response = await fetch(`${API_BASE_URL}/rides/${id}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch ride');\n      }\n      return await response.json();\n    } catch (err) {\n      console.error('Error fetching ride:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n  return {\n    rides,\n    loading,\n    error,\n    addRide,\n    updateRide,\n    deleteRide,\n    getRide,\n    refetch: fetchRides\n  };\n};\n_s(useRides, \"ErJkdrzb1DrPyWVQ9APIu7GcRrk=\");\nexport default useRides;","map":{"version":3,"names":["useEffect","useState","API_BASE_URL","process","env","REACT_APP_API_URL","useRides","_s","rides","setRides","loading","setLoading","error","setError","fetchRides","response","fetch","ok","Error","status","data","json","err","console","addRide","newRide","method","headers","body","JSON","stringify","errorData","createdRide","prev","message","updateRide","updatedRide","id","updated","map","ride","deleteRide","filter","getRide","refetch"],"sources":["C:/Users/ollie/OneDrive/Documents/personal-Projects/Mamils/frontend/src/hooks/useRides.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst useRides = () => {\r\n  const [rides, setRides] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch rides from backend\r\n  const fetchRides = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/rides`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setRides(data);\r\n    } catch (err) {\r\n      console.error('Error fetching rides:', err);\r\n      setError('Failed to load rides');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Load rides when component mounts\r\n  useEffect(() => {\r\n    fetchRides();\r\n  }, []);\r\n\r\n  // Add a new ride\r\n  const addRide = async (newRide) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/rides`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newRide),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to add ride');\r\n      }\r\n\r\n      const createdRide = await response.json();\r\n      setRides(prev => [...prev, createdRide]);\r\n      \r\n      return createdRide;\r\n    } catch (err) {\r\n      console.error('Error adding ride:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Update an existing ride\r\n  const updateRide = async (updatedRide) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/rides/${updatedRide.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedRide),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to update ride');\r\n      }\r\n\r\n      const updated = await response.json();\r\n      setRides(prev => prev.map(ride => \r\n        ride.id === updated.id ? updated : ride\r\n      ));\r\n      \r\n      return updated;\r\n    } catch (err) {\r\n      console.error('Error updating ride:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Delete a ride\r\n  const deleteRide = async (id) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/rides/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to delete ride');\r\n      }\r\n\r\n      setRides(prev => prev.filter(ride => ride.id !== id));\r\n    } catch (err) {\r\n      console.error('Error deleting ride:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Get a single ride by ID\r\n  const getRide = async (id) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/rides/${id}`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to fetch ride');\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (err) {\r\n      console.error('Error fetching ride:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  return {\r\n    rides,\r\n    loading,\r\n    error,\r\n    addRide,\r\n    updateRide,\r\n    deleteRide,\r\n    getRide,\r\n    refetch: fetchRides\r\n  };\r\n};\r\n\r\nexport default useRides;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}